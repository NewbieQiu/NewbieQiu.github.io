{"meta":{"title":"NewbieQiu","subtitle":"NewbieQiu的小屋","description":"莫听穿林打叶声，何妨吟啸且徐行","author":"NewbieQiu","url":"http://newbieqiu.top","root":"/"},"pages":[{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-22T14:53:55.061Z","comments":true,"path":"about/index.html","permalink":"http://newbieqiu.top/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-22T14:51:55.135Z","comments":true,"path":"categories/index.html","permalink":"http://newbieqiu.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-22T14:54:13.190Z","updated":"2022-04-22T14:54:13.190Z","comments":true,"path":"tags/index.html","permalink":"http://newbieqiu.top/tags/index.html","excerpt":"","text":"​—title: tagsdate: 2018-09-30 18:23:38type: “tags”layout: “tags”​—"},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-22T14:54:54.207Z","comments":true,"path":"contact/index.html","permalink":"http://newbieqiu.top/contact/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-22T14:54:33.157Z","updated":"2022-04-22T14:54:33.157Z","comments":true,"path":"friends/index.html","permalink":"http://newbieqiu.top/friends/index.html","excerpt":"","text":"title: friendsdate: 2018-12-12 21:25:30type: “friends”layout: “friends”"},{"title":"","date":"2022-04-22T14:53:20.495Z","updated":"2022-04-22T14:53:20.495Z","comments":true,"path":"404/index.html","permalink":"http://newbieqiu.top/404/index.html","excerpt":"","text":"​—title: 404date: 2018-09-30 17:25:30type: “404”layout: “404”description: “Oops～，我崩溃了！找不到你想要的页面 :(“​—"}],"posts":[{"title":"Mybatis 复习(一对多多对一)","slug":"Mybatis-复习-一对多多对一","date":"2022-04-24T09:44:33.000Z","updated":"2022-04-24T09:50:34.967Z","comments":true,"path":"2022/04/24/Mybatis-复习-一对多多对一/","link":"","permalink":"http://newbieqiu.top/2022/04/24/Mybatis-%E5%A4%8D%E4%B9%A0-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80/","excerpt":"","text":"自定义映射resultMapresultMap处理字段和属性的映射关系 resultMap：设置自定义映射 属性： id：表示自定义映射的唯一标识，不能重复 type：查询的数据要映射的实体类的类型 子标签： id：设置主键的映射关系 result：设置普通字段的映射关系 子标签属性： property：设置映射关系中实体类中的属性名 column：设置映射关系中表中的字段名 若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来 &lt;resultMap id=\"empResultMap\" type=\"Emp\"&gt; &lt;id property=\"eid\" column=\"eid\"&gt;&lt;/id&gt; &lt;result property=\"empName\" column=\"emp_name\"&gt;&lt;/result&gt; &lt;result property=\"age\" column=\"age\"&gt;&lt;/result&gt; &lt;result property=\"sex\" column=\"sex\"&gt;&lt;/result&gt; &lt;result property=\"email\" column=\"email\"&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;!--List&lt;Emp&gt; getAllEmp();--&gt; &lt;select id=\"getAllEmp\" resultMap=\"empResultMap\"&gt; select * from t_emp &lt;/select&gt; 若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系 可以通过为字段起别名的方式，保证和实体类中的属性名保持一致 &lt;!--List&lt;Emp&gt; getAllEmp();--&gt; &lt;select id=\"getAllEmp\" resultType=\"Emp\"&gt; select eid,emp_name empName,age,sex,email from t_emp &lt;/select&gt; 可以在MyBatis的核心配置文件中的setting标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。核心配置文件详解 &lt;settings&gt; &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/&gt; &lt;/settings&gt; 多对一映射处理 查询员工信息以及员工所对应的部门信息 public class Emp { private Integer eid; private String empName; private Integer age; private String sex; private String email; private Dept dept; //...构造器、get、set方法等 } 级联方式处理映射关系&lt;resultMap id=\"empAndDeptResultMapOne\" type=\"Emp\"&gt; &lt;id property=\"eid\" column=\"eid\"&gt;&lt;/id&gt; &lt;result property=\"empName\" column=\"emp_name\"&gt;&lt;/result&gt; &lt;result property=\"age\" column=\"age\"&gt;&lt;/result&gt; &lt;result property=\"sex\" column=\"sex\"&gt;&lt;/result&gt; &lt;result property=\"email\" column=\"email\"&gt;&lt;/result&gt; &lt;result property=\"dept.did\" column=\"did\"&gt;&lt;/result&gt; &lt;result property=\"dept.deptName\" column=\"dept_name\"&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;!--Emp getEmpAndDept(@Param(\"eid\")Integer eid);--&gt; &lt;select id=\"getEmpAndDept\" resultMap=\"empAndDeptResultMapOne\"&gt; select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #{eid} &lt;/select&gt; 使用association处理映射关系 association：处理多对一的映射关系 property：需要处理多对的映射关系的属性名 javaType：该属性的类型 &lt;resultMap id=\"empAndDeptResultMapTwo\" type=\"Emp\"&gt; &lt;id property=\"eid\" column=\"eid\"&gt;&lt;/id&gt; &lt;result property=\"empName\" column=\"emp_name\"&gt;&lt;/result&gt; &lt;result property=\"age\" column=\"age\"&gt;&lt;/result&gt; &lt;result property=\"sex\" column=\"sex\"&gt;&lt;/result&gt; &lt;result property=\"email\" column=\"email\"&gt;&lt;/result&gt; &lt;association property=\"dept\" javaType=\"Dept\"&gt; &lt;id property=\"did\" column=\"did\"&gt;&lt;/id&gt; &lt;result property=\"deptName\" column=\"dept_name\"&gt;&lt;/result&gt; &lt;/association&gt; &lt;/resultMap&gt; &lt;!--Emp getEmpAndDept(@Param(\"eid\")Integer eid);--&gt; &lt;select id=\"getEmpAndDept\" resultMap=\"empAndDeptResultMapTwo\"&gt; select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #{eid} &lt;/select&gt; 分步查询1. 查询员工信息 select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名） column：设置分步查询的条件 //EmpMapper里的方法 /** * 通过分步查询，员工及所对应的部门信息 * 分步查询第一步：查询员工信息 * @param * @return com.atguigu.mybatis.pojo.Emp * @date 2022/2/27 20:17 */ Emp getEmpAndDeptByStepOne(@Param(\"eid\") Integer eid); &lt;resultMap id=\"empAndDeptByStepResultMap\" type=\"Emp\"&gt; &lt;id property=\"eid\" column=\"eid\"&gt;&lt;/id&gt; &lt;result property=\"empName\" column=\"emp_name\"&gt;&lt;/result&gt; &lt;result property=\"age\" column=\"age\"&gt;&lt;/result&gt; &lt;result property=\"sex\" column=\"sex\"&gt;&lt;/result&gt; &lt;result property=\"email\" column=\"email\"&gt;&lt;/result&gt; &lt;association property=\"dept\" select=\"com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo\" column=\"did\"&gt;&lt;/association&gt; &lt;/resultMap&gt; &lt;!--Emp getEmpAndDeptByStepOne(@Param(\"eid\") Integer eid);--&gt; &lt;select id=\"getEmpAndDeptByStepOne\" resultMap=\"empAndDeptByStepResultMap\"&gt; select * from t_emp where eid = #{eid} &lt;/select&gt; 2. 查询部门信息//DeptMapper里的方法 /** * 通过分步查询，员工及所对应的部门信息 * 分步查询第二步：通过did查询员工对应的部门信息 * @param * @return com.atguigu.mybatis.pojo.Emp * @date 2022/2/27 20:23 */ Dept getEmpAndDeptByStepTwo(@Param(\"did\") Integer did); &lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt; &lt;resultMap id=\"EmpAndDeptByStepTwoResultMap\" type=\"Dept\"&gt; &lt;id property=\"did\" column=\"did\"&gt;&lt;/id&gt; &lt;result property=\"deptName\" column=\"dept_name\"&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;!--Dept getEmpAndDeptByStepTwo(@Param(\"did\") Integer did);--&gt; &lt;select id=\"getEmpAndDeptByStepTwo\" resultMap=\"EmpAndDeptByStepTwoResultMap\"&gt; select * from t_dept where did = #{did} &lt;/select&gt; 一对多映射处理public class Dept { private Integer did; private String deptName; private List&lt;Emp&gt; emps; //...构造器、get、set方法等 } collection collection：用来处理一对多的映射关系 ofType：表示该属性对饮的集合中存储的数据的类型 &lt;resultMap id=\"DeptAndEmpResultMap\" type=\"Dept\"&gt; &lt;id property=\"did\" column=\"did\"&gt;&lt;/id&gt; &lt;result property=\"deptName\" column=\"dept_name\"&gt;&lt;/result&gt; &lt;collection property=\"emps\" ofType=\"Emp\"&gt; &lt;id property=\"eid\" column=\"eid\"&gt;&lt;/id&gt; &lt;result property=\"empName\" column=\"emp_name\"&gt;&lt;/result&gt; &lt;result property=\"age\" column=\"age\"&gt;&lt;/result&gt; &lt;result property=\"sex\" column=\"sex\"&gt;&lt;/result&gt; &lt;result property=\"email\" column=\"email\"&gt;&lt;/result&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;!--Dept getDeptAndEmp(@Param(\"did\") Integer did);--&gt; &lt;select id=\"getDeptAndEmp\" resultMap=\"DeptAndEmpResultMap\"&gt; select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #{did} &lt;/select&gt; 分步查询1. 查询部门信息/** * 通过分步查询，查询部门及对应的所有员工信息 * 分步查询第一步：查询部门信息 * @param did * @return com.atguigu.mybatis.pojo.Dept * @date 2022/2/27 22:04 */ Dept getDeptAndEmpByStepOne(@Param(\"did\") Integer did); &lt;resultMap id=\"DeptAndEmpByStepOneResultMap\" type=\"Dept\"&gt; &lt;id property=\"did\" column=\"did\"&gt;&lt;/id&gt; &lt;result property=\"deptName\" column=\"dept_name\"&gt;&lt;/result&gt; &lt;collection property=\"emps\" select=\"com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo\" column=\"did\"&gt;&lt;/collection&gt; &lt;/resultMap&gt; &lt;!--Dept getDeptAndEmpByStepOne(@Param(\"did\") Integer did);--&gt; &lt;select id=\"getDeptAndEmpByStepOne\" resultMap=\"DeptAndEmpByStepOneResultMap\"&gt; select * from t_dept where did = #{did} &lt;/select&gt; 2. 根据部门id查询部门中的所有员工/** * 通过分步查询，查询部门及对应的所有员工信息 * 分步查询第二步：根据部门id查询部门中的所有员工 * @param did * @return java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt; * @date 2022/2/27 22:10 */ List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(\"did\") Integer did); &lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(\"did\") Integer did);--&gt; &lt;select id=\"getDeptAndEmpByStepTwo\" resultType=\"Emp\"&gt; select * from t_emp where did = #{did} &lt;/select&gt;","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://newbieqiu.top/tags/Mybatis/"}]},{"title":"Mybatis 笔记","slug":"Mybatis-笔记","date":"2022-04-24T07:11:32.000Z","updated":"2022-04-24T07:15:32.967Z","comments":true,"path":"2022/04/24/Mybatis-笔记/","link":"","permalink":"http://newbieqiu.top/2022/04/24/Mybatis-%E7%AC%94%E8%AE%B0/","excerpt":"","text":"MyBatis 笔记（基础配置）环境初始化依赖坐标 打包方式： jar &lt;dependencies&gt; &lt;!-- MySQL驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MyBatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.18&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 日志 --&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Junit --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; jdbc.propertiesdriver=com.mysql.jdbc.Driver url=jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8 username=root password=1234 log4j.propertieslog4j.rootLogger=DEBUG,A1 log4j.appender.A1=org.apache.log4j.ConsoleAppender log4j.appender.A1.layout=org.apache.log4j.PatternLayout log4j.appender.A1.layout.ConversionPattern=[%t] [%c]-[%p] %m%n Mapper.xml 文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;!-- namespace:名称空间, 对应接口的全类名 --&gt; &lt;mapper namespace=\"org.hong.mapper.UserMapper\"&gt; &lt;!-- select: 配置查询 id: 唯一标识, 对应接口中的方法名 resultType: 返回值类型, 类的全类名, 如果返回值是集合写集合中泛型的类型 --&gt; &lt;select id=\"getAll\" resultType=\"org.hong.pojo.User\"&gt; select * from user &lt;/select&gt; &lt;/mapper&gt; mybatis 核心配置文件习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息核心配置文件存放的位置是src/main/resources目录下 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//MyBatis.org//DTD Config 3.0//EN\" \"http://MyBatis.org/dtd/MyBatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;!--引入properties文件，此时就可以${属性名}的方式访问属性值--&gt; &lt;properties resource=\"jdbc.properties\"&gt;&lt;/properties&gt; &lt;settings&gt; &lt;!--将表中字段的下划线自动转换为驼峰--&gt; &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/&gt; &lt;!--开启延迟加载--&gt; &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;!-- typeAlias：设置某个具体的类型的别名 属性： type：需要设置别名的类型的全类名 alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名 --&gt; &lt;!--&lt;typeAlias type=\"com.atguigu.mybatis.bean.User\"&gt;&lt;/typeAlias&gt;--&gt; &lt;!--&lt;typeAlias type=\"com.atguigu.mybatis.bean.User\" alias=\"user\"&gt; &lt;/typeAlias&gt;--&gt; &lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt; &lt;package name=\"com.atguigu.mybatis.bean\"/&gt; &lt;/typeAliases&gt; &lt;!-- environments：设置多个连接数据库的环境 属性： default：设置默认使用的环境的id --&gt; &lt;environments default=\"mysql_test\"&gt; &lt;!-- environment：设置具体的连接数据库的环境信息 属性： id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境 --&gt; &lt;environment id=\"mysql_test\"&gt; &lt;!-- transactionManager：设置事务管理方式 属性： type：设置事务管理方式，type=\"JDBC|MANAGED\" type=\"JDBC\"：设置当前环境的事务管理都必须手动处理 type=\"MANAGED\"：设置事务被管理，例如spring中的AOP --&gt; &lt;transactionManager type=\"JDBC\"/&gt; &lt;!-- dataSource：设置数据源 属性： type：设置数据源的类型，type=\"POOLED|UNPOOLED|JNDI\" type=\"POOLED\"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建 type=\"UNPOOLED\"：不使用数据库连接池，即每次使用连接都需要重新创建 type=\"JNDI\"：调用上下文中的数据源 --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;!--设置驱动类的全类名--&gt; &lt;property name=\"driver\" value=\"${jdbc.driver}\"/&gt; &lt;!--设置连接数据库的连接地址--&gt; &lt;property name=\"url\" value=\"${jdbc.url}\"/&gt; &lt;!--设置连接数据库的用户名--&gt; &lt;property name=\"username\" value=\"${jdbc.username}\"/&gt; &lt;!--设置连接数据库的密码--&gt; &lt;property name=\"password\" value=\"${jdbc.password}\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--引入映射文件--&gt; &lt;mappers&gt; &lt;!-- &lt;mapper resource=\"UserMapper.xml\"/&gt; --&gt; &lt;!-- 以包为单位，将包下所有的映射文件引入核心配置文件 注意： 1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下 2. mapper接口要和mapper映射文件的名字一致 --&gt; &lt;package name=\"Mappers.UserMapper\"/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 把getSQLSession封装成工具类package org.hong.util; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.InputStream; public class MyBatisUtil { private static SqlSessionFactory sqlSessionFactory; static { try { // 获取sqlSessionFactory对象 String resource = \"mybatis-config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); } catch (IOException e) { e.printStackTrace(); } } // 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。 // SqlSession 提供了在数据库执行 SQL 命令所需的所有方法 public static SqlSession getSqlSession(){ // openSession(): 此方式打开SQL会话, 事务是开启状态 // openSession(true): 此方式打开SQL会话, 事务是关闭状态 return sqlSessionFactory.openSession(); } public static SqlSessionFactory getSqlSessionFactory() { return sqlSessionFactory; } } 普通的CRUD创建mapper接口 MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类 package Mappers; public interface UserMapper { int insertUser(); } 创建MyBatis的映射文件 对象：Java的实体类对象 关系：关系型数据库 映射：二者之间的对应关系 Java概念 数据库概念 类 表 属性 字段/列 对象 记录/行 映射文件的命名规则 表所对应的实体类的类名+Mapper.xml 例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml 因此一个映射文件对应一个实体类，对应一张表的操作 MyBatis映射文件用于编写SQL，访问以及操作表中的数据 MyBatis映射文件存放的位置是src/main/resources/mappers目录下 MyBatis中可以面向接口操作数据，要保证两个一致 mapper接口的全类名和映射文件的命名空间（namespace）保持一致 mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"zjiet.mapper.UserMapper\"&gt; &lt;!--int insertUser();--&gt; &lt;insert id=\"insertUser\"&gt; insert into user values (20, '张三', null , 2, , '176@qq.com') &lt;/insert&gt; &lt;/mapper&gt; 注意接口在java包里，xml在resources里面 且resources里的结构要与java里的结构保持一致.（即Mapper文件的相对位置） Test方法 public void test001(){ // 1.获取sqlSession对象 SqlSession sqlSession = MyBatisUtil.getSqlSession(); // 2.获取需要的mapper接口的代理对象 UserMapper mapper = sqlSession.getMapper(UserMapper.class); // 3.调用对应的方法执行操作 int save = mapper.insertUser(); System.out.println(save); // 4.提交事务 sqlSession.commit(); // 5.关闭sqlSession sqlSession.close(); }","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://newbieqiu.top/tags/Mybatis/"}]},{"title":"ljy帅","slug":"ljy帅","date":"2022-04-23T10:14:32.000Z","updated":"2022-04-23T10:47:17.873Z","comments":true,"path":"2022/04/23/ljy帅/","link":"","permalink":"http://newbieqiu.top/2022/04/23/ljy%E5%B8%85/","excerpt":"","text":"ljy帅ljy shuai","categories":[],"tags":[]},{"title":"zsh最难看","slug":"zsh最难看","date":"2022-04-23T10:14:17.000Z","updated":"2022-04-23T10:47:17.875Z","comments":true,"path":"2022/04/23/zsh最难看/","link":"","permalink":"http://newbieqiu.top/2022/04/23/zsh%E6%9C%80%E9%9A%BE%E7%9C%8B/","excerpt":"","text":"zsh最难看了","categories":[],"tags":[]},{"title":"qzz帅","slug":"qzz帅","date":"2022-04-23T10:14:04.000Z","updated":"2022-04-23T10:47:17.876Z","comments":true,"path":"2022/04/23/qzz帅/","link":"","permalink":"http://newbieqiu.top/2022/04/23/qzz%E5%B8%85/","excerpt":"","text":"qzzshuai","categories":[],"tags":[]},{"title":"ght好帅","slug":"ght好帅","date":"2022-04-23T10:13:37.000Z","updated":"2022-04-23T10:47:17.872Z","comments":true,"path":"2022/04/23/ght好帅/","link":"","permalink":"http://newbieqiu.top/2022/04/23/ght%E5%A5%BD%E5%B8%85/","excerpt":"","text":"顾海涛真是太帅了啊ghtshuai","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-04-22T09:50:46.644Z","updated":"2022-04-23T01:20:09.890Z","comments":true,"path":"2022/04/22/hello-world/","link":"","permalink":"http://newbieqiu.top/2022/04/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://newbieqiu.top/tags/Mybatis/"}]}